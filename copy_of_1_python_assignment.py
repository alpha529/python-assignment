# -*- coding: utf-8 -*-
"""Copy of 1.Python Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NqGPn2hMds3U0u5AdPBYrecc-Kth_y9P

<h1>Python: without numpy or sklearn </h1>

<h3> Q1: Given two matrices please print the product of those two matrices </h3>
<pre>

Ex 1: A   = [[1 3 4]
             [2 5 7]
             [5 9 6]]
      B   = [[1 0 0]
             [0 1 0]
             [0 0 1]]
      A*B = [[1 3 4]
             [2 5 7]
             [5 9 6]]

     
Ex 2: A   = [[1 2]
             [3 4]]
      B   = [[1 2 3 4 5]
             [5 6 7 8 9]]
      A*B = [[11 14 17 20 23]
             [23 30 36 42 51]]
             
Ex 3: A   = [[1 2]
             [3 4]]
      B   = [[1 4]
             [5 6]
             [7 8]
             [9 6]]
      A*B =Not possible
</pre>
"""

A   = [[1,3,4],
       [2,5,7],
       [5,9,6]]
B   = [[1,0,0],
       [0,1,0],
       [0,0,1]]
result =[[0,0,0],
         [0,0,0],
          [0,0,0]]
def matrix_mul(A, B):
    for i in range(len(A)):
      for j in range(len(B[0])):
        for k in range(len(B)):
          result[i][j] +=A[i][k]*B[k][j]
    for r in result:
      print(r)

matrix_mul(A, B)

"""<h3> Q2: Select a number randomly with probability proportional to its magnitude from the given array of n elements</h3>

consider an experiment, selecting an element from the list A randomly with probability proportional to its magnitude.
assume we are doing the same experiment for 100 times with replacement, in each experiment you will print a number that is selected randomly from A.

<pre>
Ex 1: A = [0 5 27 6 13 28 100 45 10 79]
let f(x) denote the number of times x getting selected in 100 experiments.
f(100) > f(79) > f(45) > f(28) > f(27) > f(13) > f(10) > f(6) > f(5) > f(0)
</pre>
"""

import random
from random import uniform
A = [0,5,27,6,13,28,100,45,10,79]



def pick_a_number_from_list(A):
  sum=0     
  for i in range(len(A)):
    sum = sum + A[i] #taking sum of each element in the list

  A_dash = []
  for j in range(len(A)):
    A_dash.append((A[j]/sum))#dividing all the elements of list A with sum
#cumilative sum
  d_bar =[]
  temp = 0
  for k in range(len(A)):
    d_bar.append(temp + A_dash[k])
    temp = d_bar[k]

  r = random.uniform(0,1.0)
  number = 0
  for p in range(len(d_bar)):
    if (r < d_bar[p]): #if r is in bitween the two elements then returning the same index value in the list A
      return A[p]



def sampling_based_on_magnitued():
  A = [0,5,27,6,13,28,100,45,10,79]
  for i in range(0,100):
    number = pick_a_number_from_list(A)
    print(number)
        

sampling_based_on_magnitued()

"""As 100 has been repeated the most hence the probability is propotional to the magnitude of the number

<h3> Q3: Replace the digits in the string with #</h3>

consider a string that will have digits in that, we need to remove all the not digits and replace the digits with #
<pre>
Ex 1: A = 234                Output: ###
Ex 2: A = a2b3c4             Output: ###
Ex 3: A = abc                Output:   (empty string)
Ex 5: A = #2a$#b%c%561#      Output: ####
</pre>
"""

import re
examples=['234','a2b3c4','abc','#2a4#b%c%561#']

def replace_digits(examples):
  for example in examples:
    non_digits ='#'*len(re.sub(r'\D','',example))
    print('input ={0} and output={1}'.format(example,non_digits))
    

replace_digits(examples)

"""# New Section

<h3> Q4: Students marks dashboard</h3>

consider the marks list of class students given two lists <br>
Students = ['student1','student2','student3','student4','student5','student6','student7','student8','student9','student10'] <br>
Marks = [45, 78, 12, 14, 48, 43, 45, 98, 35, 80] <br>
from the above two lists the Student[0] got Marks[0],  Student[1] got Marks[1] and so on <br><br>
your task is to print the name of students
<strong>a. Who got top 5 ranks, in the descending order of marks</strong> <br>
<strong>b. Who got least 5 ranks, in the increasing order of marks</strong><br>
<strong>d. Who got marks between  &gt;25th percentile &lt;75th percentile, in the increasing order of marks</strong>

<pre>
Ex 1: 
Students=['student1','student2','student3','student4','student5','student6','student7','student8','student9','student10'] 
Marks = [45, 78, 12, 14, 48, 43, 47, 98, 35, 80]
a. 
student8  98
student10 80
student2  78
student5  48
student7  47
b.
student3 12
student4 14
student9 35
student6 43
student1 45
c.
student9 35
student6 43
student1 45
student7 47
student5 48
</pre>

reference from https://stackoverflow.com/questions/57143342/how-do-you-find-percentile-for-the-values-of-a-dictionary-in-python
"""

students= ['student1','student2','student3','student4','student5','student6','student7','student8','student9','student10'] 
marks = [45, 78, 12, 14, 48, 43, 47, 98, 35, 80]
import math
def students_dash_board(students,marks):
  combined = zip(marks,students) #combining students and marks in through zip in a list
  combined = list(sorted(combined,key=lambda item: item[0]))
  print(combined)
  
#defining combined 
  top_5_students = combined
  least_5_students = combined
  students_bitween_25_and_75 = combined[math.ceil(0.20*len(combined)):math.floor(0.75*len(combined))] #defining the index of list bitween 25% to 75%
  print(combined)
   
  if len(combined)> 5: #will help to remove first five and last five elements
    top_5_students = combined[:-6:-1]
    least_5_students = combined[:5]
    return top_5_students,least_5_students,students_bitween_25_and_75

print('the top five students are', top_5_students)
print('the least five students are',least_5_students)
print('the interquartile range is',students_bitween_25_and_75)

"""<h3> Q5: Find the closest points</h3>

consider you have given n data points in the form of list of tuples like S=[(x1,y1),(x2,y2),(x3,y3),(x4,y4),(x5,y5),..,(xn,yn)] and a point P=(p,q) <br> your task is to find 5 closest points(based on cosine distance) in S from P
<br>cosine distance between two points (x,y) and (p,q) is defind as $cos^{-1}(\frac{(x\cdot p+y\cdot q)}{\sqrt(x^2+y^2)\cdot\sqrt(p^2+q^2)})$
<pre>
Ex:

S= [(1,2),(3,4),(-1,1),(6,-7),(0, 6),(-5,-8),(-1,-1)(6,0),(1,-1)]
P= (3,-4)
<img src='https://i.imgur.com/vIFPOcG.jpg', width=300>
Output:
(6,-7)
(1,-1)
(6,0)
(-5,-8)
(-1,-1)
</pre>
"""

import math

# write your python code here
# you can take the above example as sample input for your program to test
# it should work for any general input try not to hard code for only given input examples
# you can free to change all these codes/structure


# here S is list of tuples and P is a tuple ot len=2
def closest_points_to_p(S, P):
  all_the_closest_points=[]
  closest_point=[]
  for point in S:
    temp_closest_points_to_p = float('inf')
    den = math.sqrt((point[0]**2)*(P[0]**2))+ math.sqrt((point[1]**2)*(P[1]**2))  #denominator 
    num = point[0]*P[0]+point[1]*P[1] #numerator
    if den != 0:
      temp_closest_points_to_p = math.acos(num/den)
      all_the_closest_points.append((temp_closest_points_to_p,point))
      print(all_the_closest_points)
  for i in sorted(all_the_closest_points,key=lambda x: x[0])[:5]: 
    closest_point.append(i[1]) #taking only the points and not the values
  return closest_point # its list of tuples

S= [(1,2),(3,4),(-1,1),(6,-7),(0, 6),(-5,-8),(-1,-1),(6,0),(1,-1)]

P= (3,-4)
points = closest_points_to_p(S, P)
for point in points:
  print(point) #print the returned values

"""<h3> Q6: Find Which line separates oranges and apples</h3>
consider you have given two set of data points in the form of list of tuples like 
<pre>
Red =[(R11,R12),(R21,R22),(R31,R32),(R41,R42),(R51,R52),..,(Rn1,Rn2)]
Blue=[(B11,B12),(B21,B22),(B31,B32),(B41,B42),(B51,B52),..,(Bm1,Bm2)]
</pre>
and set of line equations(in the string formate, i.e list of strings)
<pre>
Lines = [a1x+b1y+c1,a2x+b2y+c2,a3x+b3y+c3,a4x+b4y+c4,..,K lines]
Note: you need to string parsing here and get the coefficients of x,y and intercept
</pre>
your task is to for each line that is given print "YES"/"NO", you will print yes, if all the red points are one side of the line and blue points are other side of the line, otherwise no
<pre>
Ex:
Red= [(1,1),(2,1),(4,2),(2,4), (-1,4)]
Blue= [(-2,-1),(-1,-2),(-3,-2),(-3,-1),(1,-3)]
Lines=["1x+1y+0","1x-1y+0","1x+0y-3","0x+1y-0.5"]
<img src='https://i.imgur.com/DoQf7mE.jpg' width=400>
Output:
YES
NO
NO
YES
</pre>
"""

import math
# write your python code here
# you can take the above example as sample input for your program to test
# it should work for any general input try not to hard code for only given input strings


# you can free to change all these codes/structure
def i_am_the_one(red,blue,line):
  red_side = -1 #taking red side as -1
  #inorder to replace the line with string format using %s in the location of red points
  line_1 = eval(line.replace('x','*%s'%red[0][0]).replace('y','*%s'%red[0][1])) #multiplying the coeffecents of x and y with points of red in the list using eval
  if(line_1 > 0):
      red_side = 1
  for point in red:
    if(red_side == 1 and eval(line.replace('x','*%s'%point[0]).replace('y','*%s'%point[1]))<0): #if red side is 1 and line is less than zero, 'NO'
      return 'NO'
    elif (red_side == -1 and eval(line.replace('x','*%s'%point[0]).replace('y','*%s'%point[1]))>0):#if red side is -1 and line is greater than zero,'NO'
            return "NO"
    
  blue_side = -1 * red_side #taking blue side as 1
  for point in blue:
    if(blue_side == 1 and eval(line.replace('x','*%s'%point[0]).replace('y','*%s'%point[1]))<0): #if blue side 1 and line is less than zero ,'NO'
      return 'NO'
      
    elif (blue_side == -1 and eval(line.replace('x','*%s'%point[0]).replace('y','*%s'%point[1]))>0):#if blue side -1 and line is greater than zero,'NO'
      return "NO"
        
        
        
    return "YES"
Red= [(1,1),(2,1),(4,2),(2,4), (-1,4)]
Blue= [(-2,-1),(-1,-2),(-3,-2),(-3,-1),(1,-3)]
Lines=["1x+1y+0","1x-1y+0","1x+0y-3","0x+1y-0.5"]

for i in Lines:
    yes_or_no = i_am_the_one(Red, Blue, i)
    print(yes_or_no) # the returned value

"""<h3> Q7: Filling the missing values in the specified formate</h3>
You will be given a string with digits and '\_'(missing value) symbols you have to replace the '\_' symbols as explained 
<pre>
Ex 1: _, _, _, 24 ==> 24/4, 24/4, 24/4, 24/4 i.e we. have distributed the 24 equally to all 4 places <br>
Ex 2: 40, _, _, _, 60 ==> (60+40)/5,(60+40)/5,(60+40)/5,(60+40)/5,(60+40)/5 ==> 20, 20, 20, 20, 20 i.e. the sum of (60+40) is distributed qually to all 5 places<br>
Ex 3: 80, _, _, _, _  ==> 80/5,80/5,80/5,80/5,80/5 ==> 16, 16, 16, 16, 16 i.e. the 80 is distributed qually to all 5 missing values that are right to it<br>
Ex 4: _, _, 30, _, _, _, 50, _, _  
==> we will fill the missing values from left to right 
    a. first we will distribute the 30 to left two missing values (10, 10, 10, _, _, _, 50, _, _)
    b. now distribute the sum (10+50) missing values in between (10, 10, 12, 12, 12, 12, 12, _, _) 
    c. now we will distribute 12 to right side missing values (10, 10, 12, 12, 12, 12, 4, 4, 4)
</pre>
for a given string with comma seprate values, which will have both missing values numbers like ex: "_, _, x, _, _, _"
you need fill the missing values

Q: your program reads a string like ex: "_, _, x, _, _, _" and returns the filled sequence

Ex: 
<pre>
Input1: "_,_,_,24"
Output1: 6,6,6,6

Input2: "40,_,_,_,60"
Output2: 20,20,20,20,20

Input3: "80,_,_,_,_"
Output3: 16,16,16,16,16

Input4: "_,_,30,_,_,_,50,_,_"
Output4: 10,10,12,12,12,12,4,4,4
</pre>

reference from :https://stackoverflow.com/questions/57179618/filling-the-missing-values-in-the-specified-format-python
"""

# write your python code here
# you can take the above example as sample input for your program to test
# it should work for any general input try not to hard code for only given input strings


# you can free to change all these codes/structure
def curve_smoothing(S):
    a = S.split(',')
    count = 0
    middle_value = 0
    for i in range(len(a)): #counting the missing values of left side
      if a[i] == '_':
        count = count + 1
      else:
        for j in range(i + 1):
           a[j] = str((float(a[i])/(count + 1))) #storing and dividing the value with n+1 spaces
        middle_value = i
        middle_store_value = float(a[i])
        break
    denominator = 1
    flag = 0
    for k in range(middle_value+1,len(a)): #middle vlaue
      if a[k] != '_':
        denominator = (k + 1 - middle_value)
        flag = k
        break
    flag_value = float(a[flag])
    for p in range(middle_value,flag + 1):
      a[p]=str((middle_store_value+flag_value) /(denominator))#storing the middle values 
    
    last_value = float(a[flag]) #last values
    for q in range(flag,len(a)):
      a[q] = str(last_value/(len(a) - flag))    #storing the last values
    return a

S=  "_,_,30,_,_,_,50,_,_"
smoothed_values= curve_smoothing(S)
print(smoothed_values)

"""<h3> Q8: Filling the missing values in the specified formate</h3>
You will be given a list of lists, each sublist will be of length 2 i.e. [[x,y],[p,q],[l,m]..[r,s]]
consider its like a martrix of n rows and two columns
1. the first column F will contain only 5 uniques values (F1, F2, F3, F4, F5)
2. the second column S will contain only 3 uniques values (S1, S2, S3)
<pre>
your task is to find
a. Probability of P(F=F1|S==S1), P(F=F1|S==S2), P(F=F1|S==S3)
b. Probability of P(F=F2|S==S1), P(F=F2|S==S2), P(F=F2|S==S3)
c. Probability of P(F=F3|S==S1), P(F=F3|S==S2), P(F=F3|S==S3)
d. Probability of P(F=F4|S==S1), P(F=F4|S==S2), P(F=F4|S==S3)
e. Probability of P(F=F5|S==S1), P(F=F5|S==S2), P(F=F5|S==S3)
</pre>
Ex:

<pre>
[[F1,S1],[F2,S2],[F3,S3],[F1,S2],[F2,S3],[F3,S2],[F2,S1],[F4,S1],[F4,S3],[F5,S1]]

a. P(F=F1|S==S1)=1/4, P(F=F1|S==S2)=1/3, P(F=F1|S==S3)=0/3
b. P(F=F2|S==S1)=1/4, P(F=F2|S==S2)=1/3, P(F=F2|S==S3)=1/3
c. P(F=F3|S==S1)=0/4, P(F=F3|S==S2)=1/3, P(F=F3|S==S3)=1/3
d. P(F=F4|S==S1)=1/4, P(F=F4|S==S2)=0/3, P(F=F4|S==S3)=1/3
e. P(F=F5|S==S1)=1/4, P(F=F5|S==S2)=0/3, P(F=F5|S==S3)=0/3
</pre>



"""

# write your python code here
# you can take the above example as sample input for your program to test
# it should work for any general input try not to hard code for only given input strings



# you can free to change all these codes/structure
A = [['F1','S1'],['F2','S2'],['F3','S3'],['F1','S2'],['F2','S3'],['F3','S2'],['F2','S1'],['F4','S1'],['F4','S3'],['F5','S1']]
from fractions import Fraction
def compute_conditional_probabilites(F,S):
  num = 0 
  den = 0
  for i in range(len(A)):
    if(A[i][1]==S): #Conditional probability for F/S
      den=den+1
      if(A[i][0]==F):
         num=num+1
   
  print('P(F={}|S=={})='.format(F,S), Fraction(num,den))
for k in ['F1', 'F2', 'F3', 'F4', 'F5']:
  for m in ['S1', 'S2', 'S3']:
    compute_conditional_probabilites(k,m)

"""<h3> Q9: Given two sentances S1, S2</h3>
You will be given two sentances S1, S2 your task is to find 
<pre>
a. Number of common words between S1, S2
b. Words in S1 but not in S2
c. Words in S2 but not in S1
</pre>

Ex: 
<pre>
S1= "the first column F will contain only 5 uniques values"
S2= "the second column S will contain only 3 uniques values"
Output:
a. 7
b. ['first','F','5']
c. ['second','S','3']
</pre>
"""

# write your python code here
# you can take the above example as sample input for your program to test
# it should work for any general input try not to hard code for only given input strings

# you can free to change all these codes/structure
def string_features(S1, S2):
    set_1 = set(S1.split(' '))
    set_2 = set(S2.split(' '))
    a = len(set_1.intersection(set_2))
    b = set_1 - set_2
    c = set_2 - set_1
    return a, b, c

S1= 'the first column F will contain only 5 uniques values'
S2= 'the second column S will contain only 3 uniques values'
a,b,c = string_features(S1, S2)
print('a.{}'.format(a))
print('b.{}'.format(b))
print('c.{}'.format(c))

"""<h3> Q10: Given two sentances S1, S2</h3>
You will be given a list of lists, each sublist will be of length 2 i.e. [[x,y],[p,q],[l,m]..[r,s]]
consider its like a martrix of n rows and two columns

a. the first column Y will contain interger values <br>
b. the second column $Y_{score}$ will be having float values <br>
Your task is to find the value of $f(Y,Y_{score}) = -1*\frac{1}{n}\Sigma_{for each Y,Y_{score} pair}(Ylog10(Y_{score})+(1-Y)log10(1-Y_{score}))$ here n is the number of rows in the matrix
<pre>
Ex:
[[1, 0.4], [0, 0.5], [0, 0.9], [0, 0.3], [0, 0.6], [1, 0.1], [1, 0.9], [1, 0.8]]
output:
0.4243099
</pre>
$\frac{-1}{8}\cdot((1\cdot log_{10}(0.4)+0\cdot log_{10}(0.6))+(0\cdot log_{10}(0.5)+1\cdot log_{10}(0.5)) + ... + (1\cdot log_{10}(0.8)+0\cdot log_{10}(0.2)) )$
"""

# write your python code here
# you can take the above example as sample input for your program to test
# it should work for any general input try not to hard code for only given input strings

from math import log
# you can free to change all these codes/structure
from math import log
def compute_log_loss(A):
  n = len(A)
  summision = 0
  for i in A:
    summision+= (i[0]*log(i[1],10)+((1-i[0])*log(1-i[1],10)))
  loss = -1*summision/n

  
    
  return loss

A = [[1, 0.4], [0, 0.5], [0, 0.9], [0, 0.3], [0, 0.6], [1, 0.1], [1, 0.9], [1, 0.8]]
loss = compute_log_loss(A)
print(loss)

